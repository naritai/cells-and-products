{"ast":null,"code":"import _toConsumableArray from \"/Users/Wave/Desktop/cells-products/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/Wave/Desktop/cells-products/src/components/cell-list/cell-list.js\";\nimport React from 'react';\nimport { createStore, createEvent } from 'effector';\nimport { createComponent } from 'effector-react';\nimport ProductList from '../product-list';\nimport './cell-list.css'; // ниже определить функции работы со стором\n\nvar cellListStore = createStore([]);\nvar addCellToList = createEvent('add cell to list');\nvar addProductToList = createEvent('add product to list');\nvar takeProductFromList = createEvent('take product from list');\ncellListStore.on(addCellToList, function (state, payload) {\n  return [].concat(_toConsumableArray(state), [payload]);\n}).on(addProductToList, function (state, payload) {\n  return payload;\n}).on(takeProductFromList, function (state, payload) {\n  return payload;\n});\nvar CellList = createComponent(cellListStore, function (props, cellList) {\n  return React.createElement(\"div\", {\n    className: \"cell-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, cellList.map(function (_ref) {\n    var barcode = _ref.barcode,\n        products = _ref.products;\n    return React.createElement(\"div\", {\n      key: barcode,\n      className: \"cell-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"cell-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"Cell: \", barcode), React.createElement(ProductList, {\n      products: products,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }));\n  }));\n});\n\nvar addNewCellAction = function addNewCellAction(barcode) {\n  var currentCellList = cellListStore.getState();\n  var previousCell = currentCellList.find(function (cell) {\n    return cell.barcode === barcode;\n  });\n\n  if (previousCell) {\n    alert(\"\\u042F\\u0447\\u0435\\u0439\\u043A\\u0430 \\u0441 \\u0448\\u0442\\u0440\\u0438\\u0445-\\u043A\\u043E\\u0434\\u043E\\u043C \\\"\".concat(barcode, \"\\\" \\u0443\\u0436\\u0435 \\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442\"));\n  } else {\n    var newCell = {\n      barcode: barcode,\n      products: []\n    };\n    addCellToList(newCell);\n  }\n};\n\nvar addNewProductAction = function addNewProductAction(cellBarcode, productBarcode, amount) {\n  var currentCellList = cellListStore.getState();\n  var currentCell = currentCellList.find(function (cell) {\n    return cell.barcode === cellBarcode;\n  });\n  var currentCellId = currentCellList.findIndex(function (cell) {\n    return cell.barcode === cellBarcode;\n  });\n\n  if (!currentCell) {\n    alert(\"\\u042F\\u0447\\u0435\\u0439\\u043A\\u0438 \\u0441 \\u0448\\u0442\\u0440\\u0438\\u0445-\\u043A\\u043E\\u0434\\u043E\\u043C \\\"\".concat(cellBarcode, \"\\\" \\u043D\\u0435\\u0442. \\u0414\\u043B\\u044F \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430 \\u0434\\u043E\\u0431\\u0430\\u0432\\u044C\\u0442\\u0435 \\u044F\\u0447\\u0435\\u0439\\u043A\\u0443\"));\n    return;\n  }\n\n  var currentProductList = currentCell.products;\n  var currentProduct = currentProductList.find(function (product) {\n    return product.barcode === productBarcode;\n  });\n  var currentProductId = currentProductList.findIndex(function (product) {\n    return product.barcode === productBarcode;\n  });\n  var newProduct = {\n    barcode: productBarcode,\n    amount: amount\n  };\n  var newProductList = [].concat(_toConsumableArray(currentProductList), [newProduct]);\n  var newCell = {\n    barcode: cellBarcode,\n    products: newProductList\n  };\n  var newCellList = [].concat(_toConsumableArray(currentCellList.slice(0, currentCellId)), [newCell], _toConsumableArray(currentCellList.slice(currentCellId + 1)));\n  console.log(newCellList); // addProductToList(newCellList);\n};\n\nexport { CellList, addCellToList, addProductToList, takeProductFromList, addNewCellAction, addNewProductAction };\ncellListStore.watch(console.log);","map":{"version":3,"sources":["/Users/Wave/Desktop/cells-products/src/components/cell-list/cell-list.js"],"names":["React","createStore","createEvent","createComponent","ProductList","cellListStore","addCellToList","addProductToList","takeProductFromList","on","state","payload","CellList","props","cellList","map","barcode","products","addNewCellAction","currentCellList","getState","previousCell","find","cell","alert","newCell","addNewProductAction","cellBarcode","productBarcode","amount","currentCell","currentCellId","findIndex","currentProductList","currentProduct","product","currentProductId","newProduct","newProductList","newCellList","slice","console","log","watch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { createStore, createEvent } from 'effector';\nimport { createComponent } from 'effector-react';\nimport ProductList from '../product-list';\nimport './cell-list.css';\n\n// ниже определить функции работы со стором\n\nconst cellListStore = createStore([]);\nconst addCellToList = createEvent('add cell to list');\nconst addProductToList = createEvent('add product to list');\nconst takeProductFromList = createEvent('take product from list');\n\ncellListStore\n  .on(addCellToList, (state, payload) => [...state, payload])\n  .on(addProductToList, (state, payload) => payload)\n  .on(takeProductFromList, (state, payload) => payload);\n\nconst CellList = createComponent(\n  cellListStore, (props, cellList) => {\n\n    return (\n      <div className=\"cell-list\">\n        {\n          cellList.map(\n            (({ barcode, products }) => {\n              return (\n                <div key={barcode} className=\"cell-item\">\n                  <span className=\"cell-title\">Cell: {barcode}</span>\n                  <ProductList products={products} />\n                </div>\n              )\n            })\n          )\n        }\n      </div>\n    )\n  }\n);\n\nconst addNewCellAction = (barcode) => {\n  const currentCellList = cellListStore.getState();\n  const previousCell = currentCellList.find(\n    (cell) => {\n      return cell.barcode === barcode\n    }\n  );\n\n  if (previousCell) {\n    alert(`Ячейка с штрих-кодом \"${barcode}\" уже существует`);\n  } else {\n    const newCell = {\n      barcode,\n      products: []\n    };\n    addCellToList(newCell);\n  }  \n};\n\nconst addNewProductAction = (cellBarcode, productBarcode, amount) => {\n  const currentCellList = cellListStore.getState();\n  const currentCell = currentCellList.find(cell => cell.barcode === cellBarcode);\n  const currentCellId = currentCellList.findIndex(cell => cell.barcode === cellBarcode);\n\n  if (!currentCell) {\n    alert(`Ячейки с штрих-кодом \"${cellBarcode}\" нет. Для начала добавьте ячейку`);\n    return;\n  }\n\n  const currentProductList = currentCell.products;\n  const currentProduct = currentProductList.find(product => product.barcode === productBarcode);\n  const currentProductId = currentProductList.findIndex(product => product.barcode === productBarcode);\n\n  const newProduct = {\n    barcode: productBarcode,\n    amount: amount\n  };\n\n  const newProductList = [\n    ...currentProductList,\n    newProduct\n  ];\n\n  const newCell = {\n    barcode: cellBarcode,\n    products: newProductList\n  };\n\n  const newCellList = [\n    ...currentCellList.slice(0, currentCellId),\n    newCell,\n    ...currentCellList.slice(currentCellId + 1),\n  ];\n\n  console.log(newCellList);\n\n  // addProductToList(newCellList);\n};\n\nexport {\n  CellList,\n  addCellToList,\n  addProductToList,\n  takeProductFromList,\n  addNewCellAction,\n  addNewProductAction\n}\n\ncellListStore.watch(console.log);\n"]},"metadata":{},"sourceType":"module"}