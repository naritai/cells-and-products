{"ast":null,"code":"export var isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\nexport var vaildateFormInputs = function vaildateFormInputs(cellBarcode, productBarcode, amount, resetAmount) {\n  var message = '';\n\n  if (cellBarcode.trim() === '' || productBarcode.trim() === '' || amount.trim() === '') {\n    message += \"\\u041F\\u043E\\u0436\\u0430\\u043B\\u0443\\u0439\\u0441\\u0442\\u0430, \\u0437\\u0430\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u0435 \\u0432\\u0441\\u0435 \\u043F\\u043E\\u043B\\u044F. \";\n    return message;\n  }\n\n  ;\n\n  if (!isNumeric(amount) || amount === '0') {\n    message += \"\\u041F\\u043E\\u043B\\u0435 \\\"Amount\\\" \\u0434\\u043E\\u043B\\u0436\\u043D\\u043E \\u0431\\u044B\\u0442\\u044C \\u0447\\u0438\\u0441\\u043B\\u043E\\u043C \\u0438 \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0442\\u044C \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 0\";\n    resetAmount();\n  }\n\n  ;\n  return message;\n};","map":{"version":3,"sources":["/Users/Wave/Desktop/cells-products/src/components/add-product-form/utils.js"],"names":["isNumeric","n","isNaN","parseFloat","isFinite","vaildateFormInputs","cellBarcode","productBarcode","amount","resetAmount","message","trim"],"mappings":"AAAA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD,EAAO;AAC9B,SAAO,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAN,IAAyBG,QAAQ,CAACH,CAAD,CAAxC;AACD,CAFM;AAIP,OAAO,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,WAAD,EAAcC,cAAd,EAA8BC,MAA9B,EAAsCC,WAAtC,EAAsD;AACtF,MAAIC,OAAO,GAAG,EAAd;;AAEA,MAAIJ,WAAW,CAACK,IAAZ,OAAuB,EAAvB,IACGJ,cAAc,CAACI,IAAf,OAA0B,EAD7B,IAEGH,MAAM,CAACG,IAAP,OAAkB,EAFzB,EAE6B;AAC3BD,IAAAA,OAAO,wKAAP;AACA,WAAOA,OAAP;AACD;;AAAA;;AAED,MAAI,CAACV,SAAS,CAACQ,MAAD,CAAV,IAAsBA,MAAM,KAAK,GAArC,EAA0C;AACxCE,IAAAA,OAAO,ySAAP;AACAD,IAAAA,WAAW;AACZ;;AAAA;AAED,SAAOC,OAAP;AACD,CAhBM","sourcesContent":["export const isNumeric = (n) => {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nexport const vaildateFormInputs = (cellBarcode, productBarcode, amount, resetAmount) => {\n  let message = '';\n\n  if (cellBarcode.trim() === '' \n      || productBarcode.trim() === '' \n      || amount.trim() === '') {\n    message += `Пожалуйста, заполните все поля. `;\n    return message;\n  };\n\n  if (!isNumeric(amount) || amount === '0') {\n    message += `Поле \"Amount\" должно быть числом и не может принимать значение 0`;\n    resetAmount();\n  };\n\n  return message;\n};\n"]},"metadata":{},"sourceType":"module"}