{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Wave/Desktop/cells-products/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"/Users/Wave/Desktop/cells-products/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/Wave/Desktop/cells-products/src/components/cell-list/cell-list.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 230px;\\n  height: 230px;\\n  padding: 5px;\\n  margin-right: 5px;\\n  maring-bottom: 5px;\\n\\n  border-left: 3px solid lightgray;\\n  border-bottom: 3px solid lightgray;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: space-between;\\n  width: 500px;\\n  height: 700px;\\n\\n  overflow: scroll;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { createStore, createEvent } from 'effector';\nimport { createComponent } from 'effector-react';\nimport styled from 'styled-components';\nimport ProductList from '../product-list';\nvar cellListStore = createStore([]);\nvar addCellToList = createEvent('add cell to list');\nvar addProductToList = createEvent('add product to list');\nvar takeProductFromList = createEvent('take product from list');\ncellListStore.on(addCellToList, function (state, payload) {\n  return [].concat(_toConsumableArray(state), [payload]);\n}).on(addProductToList, function (state, payload) {\n  return payload;\n}).on(takeProductFromList, function (state, payload) {\n  return payload;\n});\nvar CellsListWrapper = styled.div(_templateObject());\nvar CellItem = styled.div(_templateObject2());\nvar CellList = createComponent(cellListStore, function (props, cellList) {\n  return React.createElement(CellsListWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, cellList.map(function (_ref) {\n    var barcode = _ref.barcode,\n        products = _ref.products;\n    return React.createElement(CellItem, {\n      key: barcode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"cell-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Cell: \", barcode), React.createElement(ProductList, {\n      products: products,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }));\n  }));\n});\n\nvar updateProductListAction = function updateProductListAction(products, currentProduct, amount, productBarcode) {\n  var currentProductId = products.findIndex(function (product) {\n    return product.barcode === productBarcode;\n  });\n\n  if (!currentProduct && amount < 0) {\n    alert(\"\\u041F\\u0440\\u043E\\u0434\\u0443\\u043A\\u0442\\u0430 \\u0441 \\u043A\\u043E\\u0434\\u043E\\u043C \\\"\".concat(productBarcode, \"\\\" \\u043D\\u0435\\u0442 \\u0432 \\u0434\\u0430\\u043D\\u043D\\u043E\\u0439 \\u044F\\u0447\\u0435\\u0439\\u043A\\u0435\"));\n    return products;\n  }\n\n  ;\n\n  if (currentProduct) {\n    if (+currentProduct.amount + +amount < 0) {\n      alert(\"\\u041F\\u0440\\u043E\\u0434\\u0443\\u043A\\u0442 \\u0441 \\u043A\\u043E\\u0434\\u043E\\u043C \".concat(productBarcode, \" \\u0435\\u0441\\u0442\\u044C \\u0432 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u0435 \").concat(currentProduct.amount, \". \\u041F\\u043E\\u0436\\u0430\\u043B\\u0443\\u0439\\u0441\\u0442\\u0430, \\u0443\\u043C\\u0435\\u043D\\u044C\\u0448\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435.\"));\n      return products;\n    }\n\n    ;\n    var _newProduct = {\n      barcode: productBarcode,\n      amount: +currentProduct.amount + +amount\n    };\n    return [].concat(_toConsumableArray(products.slice(0, currentProductId)), [_newProduct], _toConsumableArray(products.slice(currentProductId + 1)));\n  }\n\n  var newProduct = {\n    barcode: productBarcode,\n    amount: amount\n  };\n  return [].concat(_toConsumableArray(products), [newProduct]);\n};\n\nvar addNewCellAction = function addNewCellAction(barcode) {\n  if (barcode === '') {\n    alert('Нельзя добавить ячейку без штрих-кода. Введите, пожалуйста, значение');\n    return;\n  }\n\n  ;\n  var currentCellList = cellListStore.getState();\n  var previousCell = currentCellList.find(function (cell) {\n    return cell.barcode === barcode;\n  });\n\n  if (previousCell) {\n    alert(\"\\u042F\\u0447\\u0435\\u0439\\u043A\\u0430 \\u0441 \\u0448\\u0442\\u0440\\u0438\\u0445-\\u043A\\u043E\\u0434\\u043E\\u043C \\\"\".concat(barcode, \"\\\" \\u0443\\u0436\\u0435 \\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442\"));\n  } else {\n    var newCell = {\n      barcode: barcode,\n      products: []\n    };\n    addCellToList(newCell);\n  }\n};\n\nvar addNewProductAction = function addNewProductAction(cellBarcode, productBarcode, amount) {\n  var currentCellList = cellListStore.getState();\n  var currentCell = currentCellList.find(function (cell) {\n    return cell.barcode === cellBarcode;\n  });\n  var currentCellId = currentCellList.findIndex(function (cell) {\n    return cell.barcode === cellBarcode;\n  });\n\n  if (!currentCell) {\n    alert(\"\\u042F\\u0447\\u0435\\u0439\\u043A\\u0438 \\u0441 \\u0448\\u0442\\u0440\\u0438\\u0445-\\u043A\\u043E\\u0434\\u043E\\u043C \\\"\".concat(cellBarcode, \"\\\" \\u043D\\u0435\\u0442. \\u0414\\u043B\\u044F \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430 \\u0434\\u043E\\u0431\\u0430\\u0432\\u044C\\u0442\\u0435 \\u044F\\u0447\\u0435\\u0439\\u043A\\u0443\"));\n    return;\n  }\n\n  var currentProductList = currentCell.products;\n  var currentProduct = currentProductList.find(function (product) {\n    return product.barcode === productBarcode;\n  });\n  var newProductList = updateProductListAction(currentProductList, currentProduct, amount, productBarcode);\n  var newCell = {\n    barcode: cellBarcode,\n    products: newProductList\n  };\n  var newCellList = [].concat(_toConsumableArray(currentCellList.slice(0, currentCellId)), [newCell], _toConsumableArray(currentCellList.slice(currentCellId + 1)));\n  addProductToList(newCellList);\n};\n\nexport { CellList, addCellToList, addProductToList, takeProductFromList, addNewCellAction, addNewProductAction };\ncellListStore.watch(console.log);","map":{"version":3,"sources":["/Users/Wave/Desktop/cells-products/src/components/cell-list/cell-list.js"],"names":["React","createStore","createEvent","createComponent","styled","ProductList","cellListStore","addCellToList","addProductToList","takeProductFromList","on","state","payload","CellsListWrapper","div","CellItem","CellList","props","cellList","map","barcode","products","updateProductListAction","currentProduct","amount","productBarcode","currentProductId","findIndex","product","alert","newProduct","slice","addNewCellAction","currentCellList","getState","previousCell","find","cell","newCell","addNewProductAction","cellBarcode","currentCell","currentCellId","currentProductList","newProductList","newCellList","watch","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { createStore, createEvent } from 'effector';\nimport { createComponent } from 'effector-react';\nimport styled from 'styled-components';\nimport ProductList from '../product-list';\n\nconst cellListStore = createStore([]);\nconst addCellToList = createEvent('add cell to list');\nconst addProductToList = createEvent('add product to list');\nconst takeProductFromList = createEvent('take product from list');\n\ncellListStore\n  .on(addCellToList, (state, payload) => [...state, payload])\n  .on(addProductToList, (state, payload) => payload)\n  .on(takeProductFromList, (state, payload) => payload);\n\n\nconst CellsListWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  width: 500px;\n  height: 700px;\n\n  overflow: scroll;\n`;\n\nconst CellItem = styled.div`\n  width: 230px;\n  height: 230px;\n  padding: 5px;\n  margin-right: 5px;\n  maring-bottom: 5px;\n\n  border-left: 3px solid lightgray;\n  border-bottom: 3px solid lightgray;\n`;\n\nconst CellList = createComponent(\n  cellListStore, (props, cellList) => {\n\n    return (\n      <CellsListWrapper>\n        {\n          cellList.map(\n            (({ barcode, products }) => {\n              return (\n                <CellItem key={barcode}>\n                  <span className=\"cell-title\">Cell: {barcode}</span>\n                  <ProductList products={products} />\n                </CellItem>\n              )\n            })\n          )\n        }\n      </CellsListWrapper>\n    )\n  }\n);\n\nconst updateProductListAction = (\n  products, currentProduct, amount, productBarcode) => {\n  const currentProductId = products.findIndex(product => product.barcode === productBarcode);\n\n  if(!currentProduct && amount < 0) {\n    alert(`Продукта с кодом \"${productBarcode}\" нет в данной ячейке`);\n    return products;\n  };\n\n  if (currentProduct) {\n    if (+currentProduct.amount + +amount < 0) {\n      alert(`Продукт с кодом ${productBarcode} есть в количестве ${currentProduct.amount}. Пожалуйста, уменьшите значение.`);\n      return products;\n    };\n\n    const newProduct = {\n      barcode: productBarcode,\n      amount: +currentProduct.amount + +amount\n    };\n\n    return [\n      ...products.slice(0, currentProductId),\n      newProduct,\n      ...products.slice(currentProductId + 1)\n    ];\n  }\n\n  const newProduct = {\n    barcode: productBarcode,\n    amount: amount\n  };\n\n  return [\n    ...products,\n    newProduct\n  ];\n};\n\nconst addNewCellAction = (barcode) => {\n  if (barcode === '') {\n    alert('Нельзя добавить ячейку без штрих-кода. Введите, пожалуйста, значение');\n    return;\n  };\n\n  const currentCellList = cellListStore.getState();\n  const previousCell = currentCellList.find(\n    (cell) => {\n      return cell.barcode === barcode\n    }\n  );\n\n  if (previousCell) {\n    alert(`Ячейка с штрих-кодом \"${barcode}\" уже существует`);\n  } else {\n    const newCell = {\n      barcode,\n      products: []\n    };\n    addCellToList(newCell);\n  }  \n};\n\nconst addNewProductAction = (cellBarcode, productBarcode, amount) => {\n  const currentCellList = cellListStore.getState();\n  const currentCell = currentCellList.find(cell => cell.barcode === cellBarcode);\n  const currentCellId = currentCellList.findIndex(cell => cell.barcode === cellBarcode);\n\n  if (!currentCell) {\n    alert(`Ячейки с штрих-кодом \"${cellBarcode}\" нет. Для начала добавьте ячейку`);\n    return;\n  }\n\n  const currentProductList = currentCell.products;\n  const currentProduct = currentProductList.find(product => product.barcode === productBarcode);\n\n  const newProductList = updateProductListAction(\n    currentProductList, currentProduct, amount, productBarcode);\n\n  const newCell = {\n    barcode: cellBarcode,\n    products: newProductList\n  };\n\n  const newCellList = [\n    ...currentCellList.slice(0, currentCellId),\n    newCell,\n    ...currentCellList.slice(currentCellId + 1),\n  ];\n\n  addProductToList(newCellList);\n};\n\nexport {\n  CellList,\n  addCellToList,\n  addProductToList,\n  takeProductFromList,\n  addNewCellAction,\n  addNewProductAction\n}\n\ncellListStore.watch(console.log);\n"]},"metadata":{},"sourceType":"module"}